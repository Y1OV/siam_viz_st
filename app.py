import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import os
import random
import pandas as pd
import asyncio
import concurrent.futures

st.set_page_config(page_title="Ikanam Service", layout="wide", page_icon="üèÜ")

async def load_csv_data(csv_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV-—Ñ–∞–π–ª —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, pd.read_csv, csv_path)

async def load_file_data(file_path):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, np.loadtxt, file_path)

async def load_and_plot_data(directory, csv_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ 9 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ CSV"""
    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
    
    if len(files) < 9:
        st.error("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 9 —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏.")
        return
    
    selected_files = random.sample(files, 9)
    
    try:
        csv_data = await load_csv_data(csv_path)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV-—Ñ–∞–π–ª–∞: {e}")
        return
    
    cols = st.columns(3)
    
    tasks = [load_file_data(os.path.join(directory, file)) for file in selected_files]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    for i, (file, result) in enumerate(zip(selected_files, results)):
        if isinstance(result, Exception):
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file}: {result}")
            continue
        
        data = result
        time = data[:, 0]
        pressure = data[:, 1]
        derivative = data[:, 2]
        
        with cols[i % 3]:
            st.markdown(f"### {file}")
            fig, ax = plt.subplots(figsize=(5, 4))
            ax.loglog(time, pressure, 'o', label='–î–∞–≤–ª–µ–Ω–∏–µ')
            ax.loglog(time, derivative, 's', label='–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –¥–∞–≤–ª–µ–Ω–∏—è')
            ax.set_xlabel("–í—Ä–µ–º—è (—á–∞—Å—ã)")
            ax.set_ylabel("–î–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è (–∞—Ç–º)")
            ax.legend()
            ax.grid(True, which='both', linestyle='--', linewidth=0.5)
            
            st.pyplot(fig)
            
            row = csv_data[csv_data['file_name'] == file]
            if not row.empty:
                st.dataframe(row)
            else:
                st.warning("–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ CSV.")

st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞–≤–ª–µ–Ω–∏—è")

directory = 'data'
csv_path = 'markup_train.csv'

if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å 9 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"):
    if os.path.isdir(directory) and os.path.exists(csv_path):
        asyncio.run(load_and_plot_data(directory, csv_path))
    else:
        st.error("–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–ª–∏ CSV-—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")




